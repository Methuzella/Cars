/*There are 2 ways to define a member function:

>>>>Inside class definition
    //What you have been doing till now 
>>>Outside class definition
    // We have to first declare the function prototype in the class definition. without giving it a definition(body)
    // Then we have to use the scope resolution::operator along with the class name and function name out side the class and define it..
   / void Members::namesAndDetails(){
  //function definition comes here
}*/

//A class to represent a car with attributes like make, model, year, and fuel level. Methods could include accelerate(), brake(), refuel(), and getCarInfo().

// C++ program to illustrate how create a simple class and
// C++ program to illustrate how create a simple class and
// object
#include <iostream>
#include <string>
using namespace std;



class Cars{
    public:
           string make, model,carStatus,motion;
           int year;
           float fuelLevel,FuelAdded, maxSpeed=15.0,defaultSpeed=4, speed=0;
        
          void getCarInfo(){
              cout<< "This is car was manufactured/produced by "<<make<< " it is a "<< year<<" "<< model << ". It currently has about "<< fuelLevel<<" litres of fuel."<<endl;
          }////General car information
          void startEngine();
          void stopEngine();
///Adding and checking fuel
          void addFuel(){
              if (fuelLevel<=1){
                  cout<<"How much fuel would you like to add?"<<endl;
                  cin>> FuelAdded;
                  cout<<"Fuel added: ";
                  
                  fuelLevel+=FuelAdded;
                  cout<<fuelLevel<<" litres"<<endl;
              }
          }
          void checkfuel(){
            if (fuelLevel<=0.01){
                  cout<<"Fuel is running low: "<<fuelLevel << " millilitres remaining"<<endl;
                  ///if stopped add fuel
                  if(carStatus=="Off"){
                      addFuel();
                  }
              }
            else{
                cout<<"There are: "<< fuelLevel<<" litres of fuel"<<endl;
              }
          }
////////////////




          void accelerate(){
                 while(carStatus=="On" && speed<maxSpeed){
        
                    if(speed==0){
                          speed=+defaultSpeed;
                        cout<<"Car has started and accelerated to: "<< speed<<endl;
                    }
                 
                    if(speed>=defaultSpeed ){
                        speed+=1;
                        fuelLevel-=0.001;
            
                        if (fuelLevel==0){
                           speed=0;///assume instantaneous stop
                           cout<<"There is no fuel. ";
                           carbrake();
                           break;
                        }
            
                        if (motion!="move"){
                            break;             
                        }
                     
                    }
                    cout<<"Car has started and accelerated to: "<< speed<<endl;
               if (carStatus=="On" && speed==maxSpeed){
                   cout<<"Maximum speed reached"<<endl;
         }
    

    }////if the car is already at max speed, the car does not accelerate
}///////////////////////////////////////////////////////////////////////////////////////////////////

         void carbrake(){
             if (speed==0){
                 cout<<"The car has stopped"<<endl;
             }
             
         }

};

//Starting and stopping the car
void Cars::startEngine(){
         carStatus="On";
         cout<<"The car has been turned on"<<endl;
         motion= "move";
         accelerate();
}
void Cars::stopEngine(){
     if (carStatus=="On"){
         carStatus="Off";
         motion="stationary";
         cout<<"The car has been turned off"<<endl;
     }
}

int main() {
	// your code goes here
         Cars Merc;
         Merc.make="Mercedez";
         Merc.model= "GLC Coupe";
         Merc.year= 2016;
         Merc.fuelLevel= 0.02;
         Merc.getCarInfo();
         
         Merc.startEngine();
         Merc.accelerate();
         //Merc.checkfuel();
         Merc.stopEngine();
}


/*No worries, I’ll break it down more clearly!

The **Accelerate** and **Brake** methods are essentially **actions** that the car performs, changing its state in terms of speed. Let's dig deeper into each one:

### 1. **Accelerate** Method:
The purpose of the **accelerate** method is to **increase the car's speed** over time. When you call this method, you're simulating the car speeding up. 

Think about how acceleration works in a real car:
- When you press the gas pedal, the car’s speed increases.
- In your car class, the **speed** could be an attribute (e.g., `speed`), which starts at 0 (car is stationary) and increases when you accelerate.

#### How it might work:
- When you call **accelerate**, the method would increase the value of `speed` by a certain amount. This change could happen incrementally to simulate continuous acceleration (e.g., adding 5 units to the speed every time the function is called).
- Optionally, you can also simulate fuel consumption (increasing fuel usage as you accelerate), because the faster you go, the more fuel the car consumes.

**Example (without code):**
- The `accelerate()` method checks if the fuel level is high enough to allow acceleration (if you have enough fuel).
- If yes, it increases the `speed` attribute by a certain amount.
- If no, you could either display a message ("Not enough fuel to accelerate") or prevent acceleration.

### 2. **Brake** Method:
The **brake** method is the opposite of **accelerate**. When you call the **brake**, you're simulating the action of **slowing down or stopping** the car. In real life, pressing the brake pedal decreases the speed of the car.

#### How it might work:
- When you call **brake**, the method would **decrease** the value of the `speed` attribute. For example, you could subtract 5 units from the current speed each time you call **brake**.
- You could also add a check to see if the car is already at a stop. If the `speed` is 0 (the car has already stopped), the method can either prevent further braking or return a message like "The car is already stopped."

**Example (without code):**
- The `brake()` method could reduce the `speed` by a set amount.
- If the car’s speed reaches 0 (or below), you would set the `speed` to 0 and output a message like "The car has stopped."

### Further Details:
- **Realistic Implementation**:  
  In reality, acceleration and braking aren't instantaneous; they take time. You can choose to make them happen over multiple steps (e.g., increase or decrease speed gradually). For example, each time you call `accelerate()`, you could add a small increment (like 1 or 2 units) to the car's speed.
  
  Similarly, for braking, you could simulate gradual deceleration, subtracting smaller amounts from the speed each time you call `brake()`.

### Possible Extensions:
- **Maximum Speed**:  
   You could set a maximum speed limit for the car. So, when calling **accelerate**, you can check if the speed has reached this limit, and if so, prevent further acceleration. Similarly, you can ensure that the car’s speed doesn’t go below 0 when braking.

- **Speeding Up and Slowing Down over Time**:  
   If you want to simulate more realistic acceleration or deceleration, you can have the car speed up or slow down based on a time factor, like adding "time" to your calculations (e.g., simulate 1 second passing with every call of `accelerate()` or `brake()`).

---

In summary:
- **Accelerate** = Increase the car's speed (add value to `speed`).
- **Brake** = Decrease the car's speed (subtract value from `speed`).

Let me know if you need more clarification!

*/
